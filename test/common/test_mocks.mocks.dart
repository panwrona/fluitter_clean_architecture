// Mocks generated by Mockito 5.4.2 from annotations
// in alfred_interview/test/common/test_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:alfred_interview/data/cryptocurrency/remote/cryptocurrency_remote_data.dart'
    as _i4;
import 'package:alfred_interview/data/cryptocurrency/response/bpi_response.dart'
    as _i2;
import 'package:alfred_interview/domain/common/failure.dart' as _i7;
import 'package:alfred_interview/domain/common/interval_emitter.dart' as _i10;
import 'package:alfred_interview/domain/cryptocurrency/entity/bitcoin_price_index.dart'
    as _i8;
import 'package:alfred_interview/domain/cryptocurrency/get_bitcoin_price_index_usecase.dart'
    as _i9;
import 'package:alfred_interview/domain/cryptocurrency/repository/cryptocurrency_repository.dart'
    as _i6;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBPIResponse_0 extends _i1.SmartFake implements _i2.BPIResponse {
  _FakeBPIResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CryptocurrencyRemoteData].
///
/// See the documentation for Mockito's code generation for more information.
class MockCryptocurrencyRemoteData extends _i1.Mock
    implements _i4.CryptocurrencyRemoteData {
  MockCryptocurrencyRemoteData() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.BPIResponse> getBPI() => (super.noSuchMethod(
        Invocation.method(
          #getBPI,
          [],
        ),
        returnValue: _i5.Future<_i2.BPIResponse>.value(_FakeBPIResponse_0(
          this,
          Invocation.method(
            #getBPI,
            [],
          ),
        )),
      ) as _i5.Future<_i2.BPIResponse>);
}

/// A class which mocks [CryptocurrencyRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCryptocurrencyRepository extends _i1.Mock
    implements _i6.CryptocurrencyRepository {
  MockCryptocurrencyRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Either<_i7.Failure, _i8.BitcoinPriceIndex>>
      getBitcoinPriceIndex() => (super.noSuchMethod(
            Invocation.method(
              #getBitcoinPriceIndex,
              [],
            ),
            returnValue: _i5
                .Future<_i3.Either<_i7.Failure, _i8.BitcoinPriceIndex>>.value(
                _FakeEither_1<_i7.Failure, _i8.BitcoinPriceIndex>(
              this,
              Invocation.method(
                #getBitcoinPriceIndex,
                [],
              ),
            )),
          ) as _i5.Future<_i3.Either<_i7.Failure, _i8.BitcoinPriceIndex>>);
}

/// A class which mocks [GetBitcoinPriceIndexUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetBitcoinPriceIndexUseCase extends _i1.Mock
    implements _i9.GetBitcoinPriceIndexUseCase {
  MockGetBitcoinPriceIndexUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Either<_i7.Failure, _i8.BitcoinPriceIndex>> execute() =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i7.Failure, _i8.BitcoinPriceIndex>>.value(
                _FakeEither_1<_i7.Failure, _i8.BitcoinPriceIndex>(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i7.Failure, _i8.BitcoinPriceIndex>>);
}

/// A class which mocks [IntervalEmitter].
///
/// See the documentation for Mockito's code generation for more information.
class MockIntervalEmitter extends _i1.Mock implements _i10.IntervalEmitter {
  MockIntervalEmitter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<E> stream<E>(Duration? interval) => (super.noSuchMethod(
        Invocation.method(
          #stream,
          [interval],
        ),
        returnValue: _i5.Stream<E>.empty(),
      ) as _i5.Stream<E>);
}
